// Autogenerated by opgen.py
import Foundation
public extension SGValue {
    var frame: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_frame_float",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var geometryModifierCustomAttribute: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var geometryModifierCustomAttributeHalf20: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half2_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var geometryModifierCustomAttributeHalf21: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half2_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var geometryModifierCustomAttributeHalf40: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometryModifierCustomAttributeHalf41: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometryModifierCustomAttributeHalf42: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_2",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometryModifierCustomAttributeHalf43: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_3",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometryModifierCustomParameter: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_parameter",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var geometryModifierModelPositionOffset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_position_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var geometryModifierModelToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometryModifierModelToWorld: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometryModifierNormalToWorld: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_normal_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix3d)])))
    }
    var geometryModifierProjectionToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_projection_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometryModifierUV0Offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var geometryModifierUV0Transform: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0_transform",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix2d)])))
    }
    var geometryModifierUV1Offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var geometryModifierUV1Transform: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1_transform",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix2d)])))
    }
    var geometryModifierVertexId: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_vertex_id",
            inputs: [],
            outputs: [.init(dataType: SGDataType.int)])))
    }
    var geometryModifierViewToProjection: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_view_to_projection",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometryModifierWorldToModel: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_world_to_model",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var materialParametersBaseColorTint: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_base_color_tint",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var materialParametersClearcoatRoughnessScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_clearcoat_roughness_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var materialParametersClearcoatScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_clearcoat_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var materialParametersEmissiveColor: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_emissive_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var materialParametersMetallicScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_metallic_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var materialParametersOpacityScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_opacity_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var materialParametersOpacityThreshold: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_opacity_threshold",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var materialParametersRoughnessScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_roughness_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var materialParametersSpecularScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_specular_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var occlusionSurfaceshader: SGString {
        return SGString(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_occlusion_surfaceshader",
            inputs: [],
            outputs: [.init(dataType: SGDataType.string)])))
    }
    var shadowreceiverSurfaceshader: SGString {
        return SGString(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_shadowreceiver_surfaceshader",
            inputs: [],
            outputs: [.init(dataType: SGDataType.string)])))
    }
    var surfaceAmbientOcclusion: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_ambient_occlusion",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceBaseColor: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_base_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var surfaceClearcoat: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_clearcoat",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceClearcoatRoughness: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_clearcoat_roughness",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceCustomAttribute: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var surfaceCustomAttributeHalf20: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half2_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var surfaceCustomAttributeHalf21: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half2_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var surfaceCustomAttributeHalf40: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surfaceCustomAttributeHalf41: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surfaceCustomAttributeHalf42: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_2",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surfaceCustomAttributeHalf43: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_3",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surfaceCustomParameter: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_parameter",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var surfaceEmissiveColor: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_emissive_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var surfaceMetallic: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_metallic",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceModelToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surfaceModelToWorld: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surfaceOpacity: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_opacity",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceProjectionToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_projection_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surfaceRoughness: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_roughness",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceScreenPosition: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_screen_position",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var surfaceSpecular: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_specular",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surfaceViewDirection: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_view_direction",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surfaceViewToProjection: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_view_to_projection",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surfaceWorldToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_world_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var time: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_time_float",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
}
