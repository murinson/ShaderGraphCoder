// Autogenerated by opgen.py
import Foundation
public extension SGValue {
    var frame: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_frame_float",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var geometry_modifier_bitangent: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_bitangent",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var geometry_modifier_color: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color4f)])))
    }
    var geometry_modifier_custom_attribute: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var geometry_modifier_custom_attribute_half2_0: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half2_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var geometry_modifier_custom_attribute_half2_1: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half2_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var geometry_modifier_custom_attribute_half4_0: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometry_modifier_custom_attribute_half4_1: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometry_modifier_custom_attribute_half4_2: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_2",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometry_modifier_custom_attribute_half4_3: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_3",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var geometry_modifier_custom_parameter: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_parameter",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var geometry_modifier_model_position_offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_position_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var geometry_modifier_model_to_view: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometry_modifier_model_to_world: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometry_modifier_normal: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_normal",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var geometry_modifier_normal_to_world: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_normal_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix3d)])))
    }
    var geometry_modifier_position: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_position",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var geometry_modifier_projection_to_view: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_projection_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometry_modifier_time: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_time",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var geometry_modifier_uv0: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var geometry_modifier_uv0_offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var geometry_modifier_uv0_transform: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0_transform",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix2d)])))
    }
    var geometry_modifier_uv1: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var geometry_modifier_uv1_offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var geometry_modifier_uv1_transform: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1_transform",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix2d)])))
    }
    var geometry_modifier_vertex_id: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_vertex_id",
            inputs: [],
            outputs: [.init(dataType: SGDataType.int)])))
    }
    var geometry_modifier_view_to_projection: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_view_to_projection",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var geometry_modifier_world_to_model: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_world_to_model",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var material_parameters_base_color_tint: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_base_color_tint",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var material_parameters_clearcoat_roughness_scale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_clearcoat_roughness_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var material_parameters_clearcoat_scale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_clearcoat_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var material_parameters_emissive_color: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_emissive_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var material_parameters_metallic_scale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_metallic_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var material_parameters_opacity_scale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_opacity_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var material_parameters_opacity_threshold: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_opacity_threshold",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var material_parameters_roughness_scale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_roughness_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var material_parameters_specular_scale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_specular_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var occlusion_surfaceshader: SGString {
        return SGString(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_occlusion_surfaceshader",
            inputs: [],
            outputs: [.init(dataType: SGDataType.string)])))
    }
    var shadowreceiver_surfaceshader: SGString {
        return SGString(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_shadowreceiver_surfaceshader",
            inputs: [],
            outputs: [.init(dataType: SGDataType.string)])))
    }
    var surface_ambient_occlusion: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_ambient_occlusion",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_base_color: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_base_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var surface_clearcoat: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_clearcoat",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_clearcoat_roughness: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_clearcoat_roughness",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_color: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color4f)])))
    }
    var surface_custom_attribute: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var surface_custom_attribute_half2_0: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half2_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var surface_custom_attribute_half2_1: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half2_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    var surface_custom_attribute_half4_0: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surface_custom_attribute_half4_1: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surface_custom_attribute_half4_2: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_2",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surface_custom_attribute_half4_3: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_3",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    var surface_custom_parameter: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_parameter",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var surface_emissive_color: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_emissive_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    var surface_geometry_bitangent: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_geometry_bitangent",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_geometry_normal: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_geometry_normal",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_geometry_tangent: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_geometry_tangent",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_metallic: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_metallic",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_model_position: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_position",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_model_to_view: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surface_model_to_world: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surface_opacity: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_opacity",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_projection_to_view: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_projection_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surface_roughness: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_roughness",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_screen_position: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_screen_position",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    var surface_specular: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_specular",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_tangent_space_normal: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_tangent_space_normal",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_time: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_time",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    var surface_uv0: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_uv0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var surface_uv1: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_uv1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    var surface_view_direction: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_view_direction",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_view_to_projection: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_view_to_projection",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    var surface_world_position: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_world_position",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    var surface_world_to_view: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_world_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
}
