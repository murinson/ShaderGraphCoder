// Autogenerated by opgen.py
import Foundation
public extension SGValue {
    /// Frame
    var frame: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_frame_float",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Geometry Modifier Custom Attribute
    var geometryModifierCustomAttribute: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    /// Geometry Modifier Custom Attribute 0
    var geometryModifierCustomAttributeHalf20: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half2_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    /// Geometry Modifier Custom Attribute 1
    var geometryModifierCustomAttributeHalf21: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half2_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    /// Geometry Modifier Custom Attribute 0
    var geometryModifierCustomAttributeHalf40: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Geometry Modifier Custom Attribute 1
    var geometryModifierCustomAttributeHalf41: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Geometry Modifier Custom Attribute 2
    var geometryModifierCustomAttributeHalf42: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_2",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Geometry Modifier Custom Attribute 3
    var geometryModifierCustomAttributeHalf43: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_attribute_half4_3",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Geometry Modifier Custom Parameter
    var geometryModifierCustomParameter: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_custom_parameter",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    /// Geometry Modifier Model Position Offset
    var geometryModifierModelPositionOffset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_position_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    /// Geometry Modifier Model To View
    var geometryModifierModelToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Geometry Modifier Model To World
    var geometryModifierModelToWorld: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_model_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Geometry Modifier Normal To World
    var geometryModifierNormalToWorld: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_normal_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix3d)])))
    }
    /// Geometry Modifier Projection To View
    var geometryModifierProjectionToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_projection_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Geometry Modifier uv0 Offset
    var geometryModifierUV0Offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    /// Geometry Modifier uv0 Transform
    var geometryModifierUV0Transform: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv0_transform",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix2d)])))
    }
    /// Geometry Modifier uv1 Offset
    var geometryModifierUV1Offset: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1_offset",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2f)])))
    }
    /// Geometry Modifier uv1 Transform
    var geometryModifierUV1Transform: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_uv1_transform",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix2d)])))
    }
    /// Geometry Modifier Vertex ID
    var geometryModifierVertexId: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_vertex_id",
            inputs: [],
            outputs: [.init(dataType: SGDataType.int)])))
    }
    /// Geometry Modifier View To Projection
    var geometryModifierViewToProjection: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_view_to_projection",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Geometry Modifier World To Model
    var geometryModifierWorldToModel: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_geometry_modifier_world_to_model",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Material Parameter Base Color Tint
    var materialParametersBaseColorTint: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_base_color_tint",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    /// Material Parameter Roughness Scale
    var materialParametersClearcoatRoughnessScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_clearcoat_roughness_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Material Parameter Clearcoat Scale
    var materialParametersClearcoatScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_clearcoat_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Material Parameter Emissive Color
    var materialParametersEmissiveColor: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_emissive_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    /// Material Parameter Metallic Scale
    var materialParametersMetallicScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_metallic_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Material Parameter Opacity Scale
    var materialParametersOpacityScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_opacity_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Material Parameter Opacity Threshold
    var materialParametersOpacityThreshold: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_opacity_threshold",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Material Parameter Roughness Scale
    var materialParametersRoughnessScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_roughness_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Material Parameter Specular Scale
    var materialParametersSpecularScale: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_material_parameters_specular_scale",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Ambient Occlusion
    var surfaceAmbientOcclusion: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_ambient_occlusion",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Base Color
    var surfaceBaseColor: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_base_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    /// Surface Clearcoat
    var surfaceClearcoat: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_clearcoat",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Clearcoat Roughness
    var surfaceClearcoatRoughness: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_clearcoat_roughness",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Custom Attribute
    var surfaceCustomAttribute: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    /// Surface Custom Attribute 0
    var surfaceCustomAttributeHalf20: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half2_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    /// Surface Custom Attribute 1
    var surfaceCustomAttributeHalf21: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half2_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector2h)])))
    }
    /// Surface Custom Attribute 0
    var surfaceCustomAttributeHalf40: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_0",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Surface Custom Attribute 1
    var surfaceCustomAttributeHalf41: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_1",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Surface Custom Attribute 2
    var surfaceCustomAttributeHalf42: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_2",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Surface Custom Attribute 3
    var surfaceCustomAttributeHalf43: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_attribute_half4_3",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4h)])))
    }
    /// Surface Custom Parameter
    var surfaceCustomParameter: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_custom_parameter",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    /// Surface Emissive Color
    var surfaceEmissiveColor: SGColor {
        return SGColor(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_emissive_color",
            inputs: [],
            outputs: [.init(dataType: SGDataType.color3f)])))
    }
    /// Surface Metallic
    var surfaceMetallic: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_metallic",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Model To View
    var surfaceModelToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Surface Model To World
    var surfaceModelToWorld: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_model_to_world",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Surface Opacity
    var surfaceOpacity: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_opacity",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Projection To View
    var surfaceProjectionToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_projection_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Surface Roughness
    var surfaceRoughness: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_roughness",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface Screen Position
    var surfaceScreenPosition: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_screen_position",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector4f)])))
    }
    /// Surface Specular
    var surfaceSpecular: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_specular",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
    /// Surface View Direction
    var surfaceViewDirection: SGVector {
        return SGVector(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_view_direction",
            inputs: [],
            outputs: [.init(dataType: SGDataType.vector3f)])))
    }
    /// Surface View To Projection
    var surfaceViewToProjection: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_view_to_projection",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Surface World To View
    var surfaceWorldToView: SGMatrix {
        return SGMatrix(source: .nodeOutput(SGNode(
            nodeType: "ND_realitykit_surface_world_to_view",
            inputs: [],
            outputs: [.init(dataType: SGDataType.matrix4d)])))
    }
    /// Time
    var time: SGScalar {
        return SGScalar(source: .nodeOutput(SGNode(
            nodeType: "ND_time_float",
            inputs: [],
            outputs: [.init(dataType: SGDataType.float)])))
    }
}
