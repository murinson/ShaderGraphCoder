// Autogenerated by opgen.py
import Foundation
public func RealityKitTexture2DGradient(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, dynamic_min_lod_clamp: SGScalar, gradient_dPdx: SGVector, gradient_dPdy: SGVector, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DGradient_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DGradient_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DGradient_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTexture2DLOD(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, lod: SGScalar, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DLOD_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DLOD_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DLOD_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTexture2DPixelGradient(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, dynamic_min_lod_clamp: SGScalar, gradient_dPdx: SGVector, gradient_dPdy: SGVector, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixelGradient_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixelGradient_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixelGradient_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTexture2DPixelLOD(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, lod: SGScalar, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixelLOD_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixelLOD_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixelLOD_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTexture2DPixel(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, bias: SGScalar, dynamic_min_lod_clamp: SGScalar, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixel_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixel_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2DPixel_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTexture2D(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, bias: SGScalar, dynamic_min_lod_clamp: SGScalar, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2D_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2D_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTexture2D_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTextureCubeGradient(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, dynamic_min_lod_clamp: SGScalar, gradientcube_dPdx: SGVector, gradientcube_dPdy: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureCubeGradient_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureCubeGradient_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTextureCubeLOD(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, lod: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureCubeLOD_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureCubeLOD_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTextureCube(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, bias: SGScalar, dynamic_min_lod_clamp: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureCube_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureCube_vector4",
        inputs: [],
        outputs: [])))
}
public func RealityKitTextureRead(file: TextureResource, default: SGVector, x: SGScalar, y: SGScalar, lod: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureRead_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_RealityKitTextureRead_vector4",
        inputs: [],
        outputs: [])))
}
public func UsdPrimvarReader(varname: SGString, fallback: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_boolean",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_integer",
        inputs: [],
        outputs: [])))
    return SGString(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_string",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdPrimvarReader_vector4",
        inputs: [],
        outputs: [])))
}
public func UsdTransform2d(_ in: SGVector, rotation: SGScalar, scale: SGVector, translation: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_UsdTransform2d",
        inputs: [],
        outputs: [])))
}
public func absval(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_absval_vector4",
        inputs: [],
        outputs: [])))
}
public func acos(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_acos_vector4",
        inputs: [],
        outputs: [])))
}
public func add(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_add_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_add_half",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_add_matrix22",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_add_matrix22FA",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_add_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_add_matrix33FA",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_add_matrix44",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_add_matrix44FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_add_vector4FA",
        inputs: [],
        outputs: [])))
}
public func add_displacementshader(_ in1: String, _ in2: String) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_add_displacementshader",
        inputs: [],
        outputs: [])))
}
public func add_surfaceshader(_ in1: String, _ in2: String) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_add_surfaceshader",
        inputs: [],
        outputs: [])))
}
public func add_volumeshader(_ in1: String, _ in2: String) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_add_volumeshader",
        inputs: [],
        outputs: [])))
}
public func ambientocclusion(coneangle: SGScalar, maxdistance: SGScalar) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ambientocclusion_float",
        inputs: [],
        outputs: [])))
}
public func asin(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_asin_vector4",
        inputs: [],
        outputs: [])))
}
public func atan2(iny: SGValue, inx: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_atan2_vector4",
        inputs: [],
        outputs: [])))
}
public func bitangent(space: SGString, index: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_bitangent_vector3",
        inputs: [],
        outputs: [])))
}
public func blur(_ in: SGValue, size: SGScalar, filtertype: SGString) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_blur_vector4",
        inputs: [],
        outputs: [])))
}
public func burn(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_burn_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_burn_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_burn_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_burn_half",
        inputs: [],
        outputs: [])))
}
public func ceil(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ceil_vector4",
        inputs: [],
        outputs: [])))
}
public func cellnoise2d(texcoord: SGVector) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_cellnoise2d_float",
        inputs: [],
        outputs: [])))
}
public func cellnoise3d(position: SGVector) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_cellnoise3d_float",
        inputs: [],
        outputs: [])))
}
public func clamp(_ in: SGValue, low: SGValue, high: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_half4FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_clamp_vector4FA",
        inputs: [],
        outputs: [])))
}
public func contrast(_ in: SGValue, amount: SGValue, pivot: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_contrast_vector4FA",
        inputs: [],
        outputs: [])))
}
public func cos(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_cos_vector4",
        inputs: [],
        outputs: [])))
}
public func crossproduct(_ in1: SGVector, _ in2: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_crossproduct_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_crossproduct_vector3",
        inputs: [],
        outputs: [])))
}
public func determinant(_ in: SGValue) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_determinant_matrix22",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_determinant_matrix33",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_determinant_matrix44",
        inputs: [],
        outputs: [])))
}
public func difference(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_difference_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_difference_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_difference_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_difference_half",
        inputs: [],
        outputs: [])))
}
public func disjointover(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_disjointover_color4",
        inputs: [],
        outputs: [])))
}
public func divide(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_half",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_matrix22",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_matrix44",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_divide_vector4FA",
        inputs: [],
        outputs: [])))
}
public func dodge(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dodge_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dodge_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dodge_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dodge_half",
        inputs: [],
        outputs: [])))
}
public func dot(_ in: SGValue, note: SGString) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_boolean",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_color4",
        inputs: [],
        outputs: [])))
    return TextureResource(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_filename",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_half",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_integer",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_matrix44",
        inputs: [],
        outputs: [])))
    return SGString(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_string",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_vector4",
        inputs: [],
        outputs: [])))
}
public func dot_displacementshader(_ in: String, note: SGString) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_displacementshader",
        inputs: [],
        outputs: [])))
}
public func dot_lightshader(_ in: String, note: SGString) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_lightshader",
        inputs: [],
        outputs: [])))
}
public func dot_surfaceshader(_ in: String, note: SGString) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_surfaceshader",
        inputs: [],
        outputs: [])))
}
public func dot_volumeshader(_ in: String, note: SGString) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_dot_volumeshader",
        inputs: [],
        outputs: [])))
}
public func dotproduct(_ in1: SGVector, _ in2: SGVector) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dotproduct_half2",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dotproduct_half3",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dotproduct_half4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dotproduct_vector2",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dotproduct_vector3",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_dotproduct_vector4",
        inputs: [],
        outputs: [])))
}
public func exp(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_exp_vector4",
        inputs: [],
        outputs: [])))
}
public func extract(_ in: SGVector, index: SGScalar) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_extract_color3",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_extract_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_extract_vector2",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_extract_vector3",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_extract_vector4",
        inputs: [],
        outputs: [])))
}
public func floor(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_floor_vector4",
        inputs: [],
        outputs: [])))
}
public func fractal3d(amplitude: SGValue, octaves: SGScalar, lacunarity: SGScalar, diminish: SGScalar, position: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_fractal3d_vector4FA",
        inputs: [],
        outputs: [])))
}
public func geomcolor(index: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geomcolor_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geomcolor_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_geomcolor_float",
        inputs: [],
        outputs: [])))
}
public func geompropvalue(geomprop: SGString, default: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_boolean",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_half",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_integer",
        inputs: [],
        outputs: [])))
    return SGString(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_string",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_geompropvalue_vector4",
        inputs: [],
        outputs: [])))
}
public func heighttonormal(_ in: SGScalar, scale: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_heighttonormal_vector3",
        inputs: [],
        outputs: [])))
}
public func hsvadjust(_ in: SGVector, amount: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_hsvadjust_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_hsvadjust_color4",
        inputs: [],
        outputs: [])))
}
public func hsvtorgb(_ in: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_hsvtorgb_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_hsvtorgb_color4",
        inputs: [],
        outputs: [])))
}
public func ifequal(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_color3B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_color3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_color4B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_color4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_floatB",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_floatI",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half2B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half3B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half4B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_half4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_halfB",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_halfI",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector2B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector3B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector4B",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifequal_vector4I",
        inputs: [],
        outputs: [])))
}
public func ifgreater(value1: SGScalar, value2: SGScalar, in1: SGValue, in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_color3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_color4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_floatI",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_half4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_halfI",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_vector2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_vector3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreater_vector4I",
        inputs: [],
        outputs: [])))
}
public func ifgreatereq(value1: SGScalar, value2: SGScalar, in1: SGValue, in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_color3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_color4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_floatI",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_half4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_halfI",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_vector2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_vector3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ifgreatereq_vector4I",
        inputs: [],
        outputs: [])))
}
public func image(file: TextureResource, layer: SGString, default: SGValue, texcoord: SGVector, uaddressmode: SGString, vaddressmode: SGString, filtertype: SGString, framerange: SGString, frameoffset: SGScalar, frameendaction: SGString) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_image_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_image_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_image_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_image_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_image_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_image_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_image_vector4",
        inputs: [],
        outputs: [])))
}
public func in(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_in_color4",
        inputs: [],
        outputs: [])))
}
public func inside(_ in: SGValue, mask: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_inside_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_inside_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_inside_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_inside_half",
        inputs: [],
        outputs: [])))
}
public func invertmatrix(_ in: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_invertmatrix_matrix22",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_invertmatrix_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_invertmatrix_matrix44",
        inputs: [],
        outputs: [])))
}
public func ln(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ln_vector4",
        inputs: [],
        outputs: [])))
}
public func luminance(_ in: SGVector, lumacoeffs: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_luminance_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_luminance_color4",
        inputs: [],
        outputs: [])))
}
public func magnitude(_ in: SGVector) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_magnitude_half2",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_magnitude_half3",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_magnitude_half4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_magnitude_vector2",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_magnitude_vector3",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_magnitude_vector4",
        inputs: [],
        outputs: [])))
}
public func mask(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mask_color4",
        inputs: [],
        outputs: [])))
}
public func matte(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_matte_color4",
        inputs: [],
        outputs: [])))
}
public func max(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_max_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_half4FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_max_vector4FA",
        inputs: [],
        outputs: [])))
}
public func min(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_min_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_half4FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_min_vector4FA",
        inputs: [],
        outputs: [])))
}
public func minus(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_minus_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_minus_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_minus_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_minus_half",
        inputs: [],
        outputs: [])))
}
public func mix(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_vector4",
        inputs: [],
        outputs: [])))
}
public func mix_displacementshader(fg: String, bg: String, mix: SGScalar) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_displacementshader",
        inputs: [],
        outputs: [])))
}
public func mix_surfaceshader(fg: String, bg: String, mix: SGScalar) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_surfaceshader",
        inputs: [],
        outputs: [])))
}
public func mix_volumeshader(fg: String, bg: String, mix: SGScalar) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_mix_volumeshader",
        inputs: [],
        outputs: [])))
}
public func modulo(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_modulo_vector4FA",
        inputs: [],
        outputs: [])))
}
public func multiply(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_half",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_matrix22",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_matrix44",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_vector4FA",
        inputs: [],
        outputs: [])))
}
public func multiply_displacementshaderF(_ in1: String, _ in2: SGScalar) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_displacementshaderF",
        inputs: [],
        outputs: [])))
}
public func multiply_displacementshaderV(_ in1: String, _ in2: SGVector) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_displacementshaderV",
        inputs: [],
        outputs: [])))
}
public func multiply_surfaceshaderC(_ in1: String, _ in2: SGVector) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_surfaceshaderC",
        inputs: [],
        outputs: [])))
}
public func multiply_surfaceshaderF(_ in1: String, _ in2: SGScalar) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_surfaceshaderF",
        inputs: [],
        outputs: [])))
}
public func multiply_volumeshaderC(_ in1: String, _ in2: SGVector) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_volumeshaderC",
        inputs: [],
        outputs: [])))
}
public func multiply_volumeshaderF(_ in1: String, _ in2: SGScalar) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_multiply_volumeshaderF",
        inputs: [],
        outputs: [])))
}
public func noise2d(amplitude: SGValue, pivot: SGScalar, texcoord: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise2d_vector4FA",
        inputs: [],
        outputs: [])))
}
public func noise3d(amplitude: SGValue, pivot: SGScalar, position: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_noise3d_vector4FA",
        inputs: [],
        outputs: [])))
}
public func normal_map_decode(_ in: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normal_map_decode",
        inputs: [],
        outputs: [])))
}
public func normal(space: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normal_vector3",
        inputs: [],
        outputs: [])))
}
public func normalize(_ in: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalize_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalize_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalize_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalize_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalize_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalize_vector4",
        inputs: [],
        outputs: [])))
}
public func normalmap(_ in: SGVector, space: SGString, scale: SGValue, normal: SGVector, tangent: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalmap",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_normalmap_vector2",
        inputs: [],
        outputs: [])))
}
public func out(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_out_color4",
        inputs: [],
        outputs: [])))
}
public func outside(_ in: SGValue, mask: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_outside_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_outside_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_outside_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_outside_half",
        inputs: [],
        outputs: [])))
}
public func over(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_over_color4",
        inputs: [],
        outputs: [])))
}
public func overlay(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_overlay_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_overlay_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_overlay_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_overlay_half",
        inputs: [],
        outputs: [])))
}
public func place2d(texcoord: SGVector, pivot: SGVector, scale: SGVector, rotate: SGScalar, offset: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_place2d_vector2",
        inputs: [],
        outputs: [])))
}
public func plus(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_plus_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_plus_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_plus_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_plus_half",
        inputs: [],
        outputs: [])))
}
public func position(space: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_position_vector3",
        inputs: [],
        outputs: [])))
}
public func power(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_power_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_power_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_power_vector4FA",
        inputs: [],
        outputs: [])))
}
public func premult(_ in: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_premult_color4",
        inputs: [],
        outputs: [])))
}
public func ramp4(valuetl: SGValue, valuetr: SGValue, valuebl: SGValue, valuebr: SGValue, texcoord: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramp4_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramp4_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ramp4_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramp4_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramp4_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramp4_vector4",
        inputs: [],
        outputs: [])))
}
public func ramplr(valuel: SGValue, valuer: SGValue, texcoord: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramplr_vector4",
        inputs: [],
        outputs: [])))
}
public func ramptb(valuet: SGValue, valueb: SGValue, texcoord: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_ramptb_vector4",
        inputs: [],
        outputs: [])))
}
public func range(_ in: SGValue, inlow: SGValue, inhigh: SGValue, gamma: SGValue, outlow: SGValue, outhigh: SGValue, doclamp: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_range_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_range_vector4FA",
        inputs: [],
        outputs: [])))
}
public func cameraposition(space: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cameraposition_vector3",
        inputs: [],
        outputs: [])))
}
public func cubeimage(file: TextureResource, default: SGValue, texcoord: SGVector, filtertype: SGString) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cubeimage_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cubeimage_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cubeimage_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cubeimage_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cubeimage_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_cubeimage_vector4",
        inputs: [],
        outputs: [])))
}
public func fractional(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_fractional_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_fractional_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_fractional_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_fractional_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_fractional_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_fractional_vector4",
        inputs: [],
        outputs: [])))
}
public func geometry_switch_cameraindex(mono: SGValue, left: SGValue, right: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_integer",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometry_switch_cameraindex_vector4",
        inputs: [],
        outputs: [])))
}
public func geometrymodifier_vertexshader(modelPositionOffset: SGVector, color: SGVector, normal: SGVector, bitangent: SGVector, uv0: SGVector, uv1: SGVector, userAttribute: SGVector, userAttributeHalf4_0: SGVector, userAttributeHalf4_1: SGVector, userAttributeHalf4_2: SGVector, userAttributeHalf4_3: SGVector, userAttributeHalf2_0: SGVector, userAttributeHalf2_1: SGVector) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_geometrymodifier_vertexshader",
        inputs: [],
        outputs: [])))
}
public func image_bias(file: TextureResource, default: SGValue, texcoord: SGVector, bias: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_vector3",
        inputs: [],
        outputs: [])))
}
public func image_bias_min_lod_clamp(file: TextureResource, default: SGValue, texcoord: SGVector, bias: SGScalar, min_lod_clamp: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_bias_min_lod_clamp_vector3",
        inputs: [],
        outputs: [])))
}
public func image(file: TextureResource, default: SGValue, texcoord: SGVector, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_vector3",
        inputs: [],
        outputs: [])))
}
public func image_gradient2d(file: TextureResource, default: SGValue, texcoord: SGVector, gradient2d_x: SGString, gradient2d_y: SGString, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_vector3",
        inputs: [],
        outputs: [])))
}
public func image_gradient2d_min_lod_clamp(file: TextureResource, default: SGValue, texcoord: SGVector, gradient2d_x: SGString, gradient2d_y: SGString, min_lod_clamp: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_gradient2d_min_lod_clamp_vector3",
        inputs: [],
        outputs: [])))
}
public func image_lod(file: TextureResource, default: SGValue, texcoord: SGVector, level: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_lod_vector3",
        inputs: [],
        outputs: [])))
}
public func image_min_lod_clamp(file: TextureResource, default: SGValue, texcoord: SGVector, min_lod_clamp: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_image_min_lod_clamp_vector3",
        inputs: [],
        outputs: [])))
}
public func logical_and(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_logical_and",
        inputs: [],
        outputs: [])))
}
public func logical_not(_ in: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_logical_not",
        inputs: [],
        outputs: [])))
}
public func logical_or(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_logical_or",
        inputs: [],
        outputs: [])))
}
public func logical_xor(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_logical_xor",
        inputs: [],
        outputs: [])))
}
public func oneminus(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_oneminus_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_oneminus_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_oneminus_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_oneminus_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_oneminus_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_oneminus_vector4",
        inputs: [],
        outputs: [])))
}
public func pbr_surfaceshader(baseColor: SGVector, emissiveColor: SGVector, normal: SGVector, roughness: SGScalar, metallic: SGScalar, ambientOcclusion: SGScalar, specular: SGScalar, opacity: SGScalar, opacityThreshold: SGScalar, clearcoat: SGScalar, clearcoatRoughness: SGScalar, hasPremultipliedAlpha: SGValue) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_pbr_surfaceshader",
        inputs: [],
        outputs: [])))
}
public func reflect(_ in: SGVector, normal: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_reflect_vector3",
        inputs: [],
        outputs: [])))
}
public func refract(_ in: SGVector, normal: SGVector, eta: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_refract_vector3",
        inputs: [],
        outputs: [])))
}
public func step(_ in: SGValue, edge: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_step_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_step_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_step_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_step_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_step_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_step_vector4",
        inputs: [],
        outputs: [])))
}
public func unlit_surfaceshader(color: SGVector, opacity: SGScalar, opacityThreshold: SGScalar, applyPostProcessToneMap: SGValue, hasPremultipliedAlpha: SGValue) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_unlit_surfaceshader",
        inputs: [],
        outputs: [])))
}
public func viewdirection(space: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_realitykit_viewdirection_vector3",
        inputs: [],
        outputs: [])))
}
public func remap(_ in: SGValue, inlow: SGValue, inhigh: SGValue, outlow: SGValue, outhigh: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_half4FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_remap_vector4FA",
        inputs: [],
        outputs: [])))
}
public func rgbtohsv(_ in: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_rgbtohsv_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_rgbtohsv_color4",
        inputs: [],
        outputs: [])))
}
public func rotate2d(_ in: SGVector, amount: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_rotate2d_vector2",
        inputs: [],
        outputs: [])))
}
public func rotate3d(_ in: SGVector, amount: SGScalar, axis: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_rotate3d_vector3",
        inputs: [],
        outputs: [])))
}
public func round(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_round_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_round_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_round_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_round_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_round_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_round_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_round_vector4",
        inputs: [],
        outputs: [])))
}
public func safepower(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_safepower_vector4FA",
        inputs: [],
        outputs: [])))
}
public func saturate(_ in: SGVector, amount: SGScalar, lumacoeffs: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_saturate_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_saturate_color4",
        inputs: [],
        outputs: [])))
}
public func screen(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_screen_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_screen_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_screen_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_screen_half",
        inputs: [],
        outputs: [])))
}
public func sign(_ in: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sign_vector4",
        inputs: [],
        outputs: [])))
}
public func sin(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sin_vector4",
        inputs: [],
        outputs: [])))
}
public func smoothstep(_ in: SGValue, low: SGValue, high: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_half4FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_smoothstep_vector4FA",
        inputs: [],
        outputs: [])))
}
public func splitlr(valuel: SGValue, valuer: SGValue, center: SGScalar, texcoord: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splitlr_vector4",
        inputs: [],
        outputs: [])))
}
public func splittb(valuet: SGValue, valueb: SGValue, center: SGScalar, texcoord: SGVector) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_splittb_vector4",
        inputs: [],
        outputs: [])))
}
public func sqrt(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_sqrt_vector4",
        inputs: [],
        outputs: [])))
}
public func subtract(_ in1: SGValue, _ in2: SGValue) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_color3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_color4FA",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_half",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_matrix22",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_matrix22FA",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_matrix33FA",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_matrix44",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_matrix44FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_vector2FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_vector3FA",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_subtract_vector4FA",
        inputs: [],
        outputs: [])))
}
public func surfacematerial(surfaceshader: String, displacementshader: String) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_surfacematerial",
        inputs: [],
        outputs: [])))
}
public func switch(_ in1: SGValue, _ in2: SGValue, _ in3: SGValue, _ in4: SGValue, _ in5: SGValue, _ in6: SGValue, _ in7: SGValue, _ in8: SGValue, _ in9: SGValue, _ in10: SGValue, which: SGScalar) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_color3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_color4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_color4I",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_floatI",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_half",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_halfI",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_vector2I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_vector3I",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_vector4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_switch_vector4I",
        inputs: [],
        outputs: [])))
}
public func tan(_ in: SGValue) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_half2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_half3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_half4",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tan_vector4",
        inputs: [],
        outputs: [])))
}
public func tangent(space: SGString, index: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tangent_vector3",
        inputs: [],
        outputs: [])))
}
public func texcoord(index: SGScalar) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_texcoord_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_texcoord_vector3",
        inputs: [],
        outputs: [])))
}
public func tiledimage(file: TextureResource, default: SGValue, texcoord: SGVector, uvtiling: SGVector, uvoffset: SGVector, realworldimagesize: SGVector, realworldtilesize: SGVector, filtertype: SGString, framerange: SGString, frameoffset: SGScalar, frameendaction: SGString) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_float",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_half",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_tiledimage_vector4",
        inputs: [],
        outputs: [])))
}
public func time(fps: SGScalar) -> SGScalar {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_time_float",
        inputs: [],
        outputs: [])))
}
public func transformmatrix(_ in: SGVector, mat: SGValue) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformmatrix_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformmatrix_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformmatrix_vector4",
        inputs: [],
        outputs: [])))
}
public func transformmatrix_vector2M3(_ in: SGVector, mat: SGValue) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformmatrix_vector2M3",
        inputs: [],
        outputs: [])))
}
public func transformmatrix_vector3M4(_ in: SGVector, mat: SGValue) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformmatrix_vector3M4",
        inputs: [],
        outputs: [])))
}
public func transformnormal(_ in: SGVector, fromspace: SGString, tospace: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformnormal_vector3",
        inputs: [],
        outputs: [])))
}
public func transformpoint(_ in: SGVector, fromspace: SGString, tospace: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformpoint_vector3",
        inputs: [],
        outputs: [])))
}
public func transformvector(_ in: SGVector, fromspace: SGString, tospace: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_transformvector_vector3",
        inputs: [],
        outputs: [])))
}
public func transpose(_ in: SGValue) -> SGValue {
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_transpose_matrix22",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_transpose_matrix33",
        inputs: [],
        outputs: [])))
    return SGValue(source: .nodeOutput(SGNode(
        nodeType: "ND_transpose_matrix44",
        inputs: [],
        outputs: [])))
}
public func triplanarprojection(filex: TextureResource, filey: TextureResource, filez: TextureResource, layerx: SGString, layery: SGString, layerz: SGString, default: SGValue, position: SGVector, normal: SGVector, filtertype: SGString, framerange: SGString, frameoffset: SGScalar, frameendaction: SGString) -> SGValue {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_triplanarprojection_color3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_triplanarprojection_color4",
        inputs: [],
        outputs: [])))
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_triplanarprojection_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_triplanarprojection_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_triplanarprojection_vector3",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_triplanarprojection_vector4",
        inputs: [],
        outputs: [])))
}
public func unpremult(_ in: SGVector) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_unpremult_color4",
        inputs: [],
        outputs: [])))
}
public func updirection(space: SGString) -> SGVector {
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_updirection_vector3",
        inputs: [],
        outputs: [])))
}
public func volumematerial(volumeshader: String) -> String {
    return String(source: .nodeOutput(SGNode(
        nodeType: "ND_volumematerial",
        inputs: [],
        outputs: [])))
}
public func worleynoise2d(texcoord: SGVector, jitter: SGScalar) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_worleynoise2d_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_worleynoise2d_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_worleynoise2d_vector3",
        inputs: [],
        outputs: [])))
}
public func worleynoise3d(position: SGVector, jitter: SGScalar) -> SGValue {
    return SGScalar(source: .nodeOutput(SGNode(
        nodeType: "ND_worleynoise3d_float",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_worleynoise3d_vector2",
        inputs: [],
        outputs: [])))
    return SGVector(source: .nodeOutput(SGNode(
        nodeType: "ND_worleynoise3d_vector3",
        inputs: [],
        outputs: [])))
}
