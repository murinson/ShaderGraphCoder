// Autogenerated by opgen.py
import Foundation
public func RealityKitTexture2D(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, bias: SGValue, dynamic_min_lod_clamp: SGValue, offset: SGValue) -> SGValue {
}
public func RealityKitTexture2DGradient(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, dynamic_min_lod_clamp: SGValue, gradient_dPdx: SGValue, gradient_dPdy: SGValue, offset: SGValue) -> SGValue {
}
public func RealityKitTexture2DLOD(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, lod: SGValue, offset: SGValue) -> SGValue {
}
public func RealityKitTexture2DPixel(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, bias: SGValue, dynamic_min_lod_clamp: SGValue, offset: SGValue) -> SGValue {
}
public func RealityKitTexture2DPixelGradient(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, dynamic_min_lod_clamp: SGValue, gradient_dPdx: SGValue, gradient_dPdy: SGValue, offset: SGValue) -> SGValue {
}
public func RealityKitTexture2DPixelLOD(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, lod: SGValue, offset: SGValue) -> SGValue {
}
public func RealityKitTextureCube(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, bias: SGValue, dynamic_min_lod_clamp: SGValue) -> SGValue {
}
public func RealityKitTextureCubeGradient(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, dynamic_min_lod_clamp: SGValue, gradientcube_dPdx: SGValue, gradientcube_dPdy: SGValue) -> SGValue {
}
public func RealityKitTextureCubeLOD(file: TextureResource, u_wrap_mode: String, v_wrap_mode: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, max_lod_clamp: SGValue, min_lod_clamp: SGValue, default: SGValue, texcoord: SGValue, lod: SGValue) -> SGValue {
}
public func RealityKitTextureRead(file: TextureResource, default: SGValue, x: SGValue, y: SGValue, lod: SGValue) -> SGValue {
}
public func UsdPrimvarReader(varname: String, fallback: SGValue) -> SGValue {
}
public func UsdTransform2d(in: SGValue, rotation: SGValue, scale: SGValue, translation: SGValue) -> SGValue {
}
public func absval(in: SGValue) -> SGValue {
}
public func acos(in: SGValue) -> SGValue {
}
public func add(in1: SGValue, in2: SGValue) -> SGValue {
}
public func add_displacementshader(in1: String, in2: String) -> String {
}
public func add_surfaceshader(in1: String, in2: String) -> String {
}
public func add_volumeshader(in1: String, in2: String) -> String {
}
public func ambientocclusion(coneangle: SGValue, maxdistance: SGValue) -> SGValue {
}
public func asin(in: SGValue) -> SGValue {
}
public func atan2(iny: SGValue, inx: SGValue) -> SGValue {
}
public func bitangent(space: String, index: SGValue) -> SGValue {
}
public func blur(in: SGValue, size: SGValue, filtertype: String) -> SGValue {
}
public func burn(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func ceil(in: SGValue) -> SGValue {
}
public func cellnoise2d(texcoord: SGValue) -> SGValue {
}
public func cellnoise3d(position: SGValue) -> SGValue {
}
public func clamp(in: SGValue, low: SGValue, high: SGValue) -> SGValue {
}
public func combine2(in1: SGValue, in2: SGValue) -> SGValue {
}
public func combine2_color4CF(in1: SGValue, in2: SGValue) -> SGValue {
}
public func combine2_vector4VF(in1: SGValue, in2: SGValue) -> SGValue {
}
public func combine2_vector4VV(in1: SGValue, in2: SGValue) -> SGValue {
}
public func combine3(in1: SGValue, in2: SGValue, in3: SGValue) -> SGValue {
}
public func combine4(in1: SGValue, in2: SGValue, in3: SGValue, in4: SGValue) -> SGValue {
}
public func constant(value: SGValue) -> SGValue {
}
public func contrast(in: SGValue, amount: SGValue, pivot: SGValue) -> SGValue {
}
public func convert_boolean(in: Bool) -> SGValue {
}
public func convert_color3(in: SGValue) -> SGValue {
}
public func convert_color4(in: SGValue) -> SGValue {
}
public func convert_float(in: SGValue) -> SGValue {
}
public func convert_half(in: String) -> SGValue {
}
public func convert_half2(in: SGValue) -> SGValue {
}
public func convert_half3(in: SGValue) -> SGValue {
}
public func convert_half4(in: SGValue) -> SGValue {
}
public func convert_integer(in: SGValue) -> SGValue {
}
public func convert_vector2(in: SGValue) -> SGValue {
}
public func convert_vector3(in: SGValue) -> SGValue {
}
public func convert_vector4(in: SGValue) -> SGValue {
}
public func cos(in: SGValue) -> SGValue {
}
public func crossproduct(in1: SGValue, in2: SGValue) -> SGValue {
}
public func determinant(in: SGValue) -> SGValue {
}
public func difference(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func disjointover(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func divide(in1: SGValue, in2: SGValue) -> SGValue {
}
public func dodge(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func dot(in: SGValue, note: String) -> SGValue {
}
public func dot_displacementshader(in: String, note: String) -> String {
}
public func dot_lightshader(in: String, note: String) -> String {
}
public func dot_surfaceshader(in: String, note: String) -> String {
}
public func dot_volumeshader(in: String, note: String) -> String {
}
public func dotproduct(in1: SGValue, in2: SGValue) -> SGValue {
}
public func exp(in: SGValue) -> SGValue {
}
public func extract(in: SGValue, index: SGValue) -> SGValue {
}
public func floor(in: SGValue) -> SGValue {
}
public func fractal3d(amplitude: SGValue, octaves: SGValue, lacunarity: SGValue, diminish: SGValue, position: SGValue) -> SGValue {
}
public func geomcolor(index: SGValue) -> SGValue {
}
public func geompropvalue(geomprop: String, default: SGValue) -> SGValue {
}
public func heighttonormal(in: SGValue, scale: SGValue) -> SGValue {
}
public func hsvadjust(in: SGValue, amount: SGValue) -> SGValue {
}
public func hsvtorgb(in: SGValue) -> SGValue {
}
public func ifequal(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifequal_floatB(value1: Bool, value2: Bool, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifequal_floatI(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifequal_halfB(value1: Bool, value2: Bool, in1: String, in2: String) -> String {
}
public func ifequal_halfI(value1: SGValue, value2: SGValue, in1: String, in2: String) -> String {
}
public func ifgreater(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifgreater_floatI(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifgreater_halfI(value1: SGValue, value2: SGValue, in1: String, in2: String) -> String {
}
public func ifgreatereq(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifgreatereq_floatI(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifgreatereq_halfI(value1: SGValue, value2: SGValue, in1: String, in2: String) -> String {
}
public func image(file: TextureResource, layer: String, default: SGValue, texcoord: SGValue, uaddressmode: String, vaddressmode: String, filtertype: String, framerange: String, frameoffset: SGValue, frameendaction: String) -> SGValue {
}
public func in(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func inside(in: SGValue, mask: SGValue) -> SGValue {
}
public func invertmatrix(in: SGValue) -> SGValue {
}
public func ln(in: SGValue) -> SGValue {
}
public func luminance(in: SGValue, lumacoeffs: SGValue) -> SGValue {
}
public func magnitude(in: SGValue) -> SGValue {
}
public func mask(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func matte(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func max(in1: SGValue, in2: SGValue) -> SGValue {
}
public func min(in1: SGValue, in2: SGValue) -> SGValue {
}
public func minus(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func mix(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func mix_displacementshader(fg: String, bg: String, mix: SGValue) -> String {
}
public func mix_surfaceshader(fg: String, bg: String, mix: SGValue) -> String {
}
public func mix_volumeshader(fg: String, bg: String, mix: SGValue) -> String {
}
public func modulo(in1: SGValue, in2: SGValue) -> SGValue {
}
public func multiply(in1: SGValue, in2: SGValue) -> SGValue {
}
public func multiply_displacementshaderF(in1: String, in2: SGValue) -> String {
}
public func multiply_displacementshaderV(in1: String, in2: SGValue) -> String {
}
public func multiply_surfaceshaderC(in1: String, in2: SGValue) -> String {
}
public func multiply_surfaceshaderF(in1: String, in2: SGValue) -> String {
}
public func multiply_volumeshaderC(in1: String, in2: SGValue) -> String {
}
public func multiply_volumeshaderF(in1: String, in2: SGValue) -> String {
}
public func noise2d(amplitude: SGValue, pivot: SGValue, texcoord: SGValue) -> SGValue {
}
public func noise3d(amplitude: SGValue, pivot: SGValue, position: SGValue) -> SGValue {
}
public func normal(space: String) -> SGValue {
}
public func normal_map_decode(in: SGValue) -> SGValue {
}
public func normalize(in: SGValue) -> SGValue {
}
public func normalmap(in: SGValue, space: String, scale: SGValue, normal: SGValue, tangent: SGValue) -> SGValue {
}
public func out(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func outside(in: SGValue, mask: SGValue) -> SGValue {
}
public func over(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func overlay(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func place2d(texcoord: SGValue, pivot: SGValue, scale: SGValue, rotate: SGValue, offset: SGValue) -> SGValue {
}
public func plus(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func position(space: String) -> SGValue {
}
public func power(in1: SGValue, in2: SGValue) -> SGValue {
}
public func premult(in: SGValue) -> SGValue {
}
public func ramp4(valuetl: SGValue, valuetr: SGValue, valuebl: SGValue, valuebr: SGValue, texcoord: SGValue) -> SGValue {
}
public func ramplr(valuel: SGValue, valuer: SGValue, texcoord: SGValue) -> SGValue {
}
public func ramptb(valuet: SGValue, valueb: SGValue, texcoord: SGValue) -> SGValue {
}
public func range(in: SGValue, inlow: SGValue, inhigh: SGValue, gamma: SGValue, outlow: SGValue, outhigh: SGValue, doclamp: Bool) -> SGValue {
}
public func cameraposition(space: String) -> SGValue {
}
public func combine2(in1: SGValue, in2: SGValue) -> SGValue {
}
public func combine3(in1: SGValue, in2: SGValue, in3: SGValue) -> SGValue {
}
public func combine4(in1: SGValue, in2: SGValue, in3: SGValue, in4: SGValue) -> SGValue {
}
public func cubeimage(file: TextureResource, default: SGValue, texcoord: SGValue, filtertype: String) -> SGValue {
}
public func fractional(in: SGValue) -> SGValue {
}
public func geometry_switch_cameraindex(mono: SGValue, left: SGValue, right: SGValue) -> SGValue {
}
public func geometrymodifier_vertexshader(modelPositionOffset: SGValue, color: SGValue, normal: SGValue, bitangent: SGValue, uv0: SGValue, uv1: SGValue, userAttribute: SGValue, userAttributeHalf4_0: SGValue, userAttributeHalf4_1: SGValue, userAttributeHalf4_2: SGValue, userAttributeHalf4_3: SGValue, userAttributeHalf2_0: SGValue, userAttributeHalf2_1: SGValue) -> String {
}
public func image(file: TextureResource, default: String, texcoord: SGValue, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func image_bias(file: TextureResource, default: String, texcoord: SGValue, bias: SGValue, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func image_bias_min_lod_clamp(file: TextureResource, default: String, texcoord: SGValue, bias: SGValue, min_lod_clamp: SGValue, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func image_gradient2d(file: TextureResource, default: String, texcoord: SGValue, gradient2d_x: String, gradient2d_y: String, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func image_gradient2d_min_lod_clamp(file: TextureResource, default: String, texcoord: SGValue, gradient2d_x: String, gradient2d_y: String, min_lod_clamp: SGValue, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func image_lod(file: TextureResource, default: String, texcoord: SGValue, level: SGValue, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func image_min_lod_clamp(file: TextureResource, default: String, texcoord: SGValue, min_lod_clamp: SGValue, coord: String, s_address: String, t_address: String, border_color: String, mag_filter: String, min_filter: String, mip_filter: String, max_anisotropy: SGValue, lod_min: SGValue, lod_max: SGValue) -> String {
}
public func logical_and(in1: Bool, in2: Bool) -> Bool {
}
public func logical_not(in: Bool) -> Bool {
}
public func logical_or(in1: Bool, in2: Bool) -> Bool {
}
public func logical_xor(in1: Bool, in2: Bool) -> Bool {
}
public func oneminus(in: SGValue) -> SGValue {
}
public func pbr_surfaceshader(baseColor: SGValue, emissiveColor: SGValue, normal: SGValue, roughness: SGValue, metallic: SGValue, ambientOcclusion: SGValue, specular: SGValue, opacity: SGValue, opacityThreshold: SGValue, clearcoat: SGValue, clearcoatRoughness: SGValue, hasPremultipliedAlpha: Bool) -> String {
}
public func reflect(in: SGValue, normal: SGValue) -> SGValue {
}
public func refract(in: SGValue, normal: SGValue, eta: SGValue) -> SGValue {
}
public func step(in: SGValue, edge: SGValue) -> SGValue {
}
public func unlit_surfaceshader(color: SGValue, opacity: SGValue, opacityThreshold: SGValue, applyPostProcessToneMap: Bool, hasPremultipliedAlpha: Bool) -> String {
}
public func viewdirection(space: String) -> SGValue {
}
public func remap(in: SGValue, inlow: SGValue, inhigh: SGValue, outlow: SGValue, outhigh: SGValue) -> SGValue {
}
public func rgbtohsv(in: SGValue) -> SGValue {
}
public func rotate2d(in: SGValue, amount: SGValue) -> SGValue {
}
public func rotate3d(in: SGValue, amount: SGValue, axis: SGValue) -> SGValue {
}
public func round(in: SGValue) -> SGValue {
}
public func safepower(in1: SGValue, in2: SGValue) -> SGValue {
}
public func saturate(in: SGValue, amount: SGValue, lumacoeffs: SGValue) -> SGValue {
}
public func screen(fg: SGValue, bg: SGValue, mix: SGValue) -> SGValue {
}
public func sign(in: SGValue) -> SGValue {
}
public func sin(in: SGValue) -> SGValue {
}
public func smoothstep(in: SGValue, low: SGValue, high: SGValue) -> SGValue {
}
public func splitlr(valuel: SGValue, valuer: SGValue, center: SGValue, texcoord: SGValue) -> SGValue {
}
public func splittb(valuet: SGValue, valueb: SGValue, center: SGValue, texcoord: SGValue) -> SGValue {
}
public func sqrt(in: SGValue) -> SGValue {
}
public func subtract(in1: SGValue, in2: SGValue) -> SGValue {
}
public func surfacematerial(surfaceshader: String, displacementshader: String) -> String {
}
public func switch(in1: SGValue, in2: SGValue, in3: SGValue, in4: SGValue, in5: SGValue, in6: SGValue, in7: SGValue, in8: SGValue, in9: SGValue, in10: SGValue, which: SGValue) -> SGValue {
}
public func switch_floatI(in1: SGValue, in2: SGValue, in3: SGValue, in4: SGValue, in5: SGValue, in6: SGValue, in7: SGValue, in8: SGValue, in9: SGValue, in10: SGValue, which: SGValue) -> SGValue {
}
public func switch_halfI(in1: String, in2: String, in3: String, in4: String, in5: String, in6: String, in7: String, in8: String, in9: String, in10: String, which: SGValue) -> String {
}
public func swizzle_color3(in: SGValue, channels: String) -> SGValue {
}
public func swizzle_color4(in: SGValue, channels: String) -> SGValue {
}
public func swizzle_float(in: SGValue, channels: String) -> SGValue {
}
public func swizzle_half(in: String, channels: String) -> SGValue {
}
public func swizzle_vector2(in: SGValue, channels: String) -> SGValue {
}
public func swizzle_vector3(in: SGValue, channels: String) -> SGValue {
}
public func swizzle_vector4(in: SGValue, channels: String) -> SGValue {
}
public func tan(in: SGValue) -> SGValue {
}
public func tangent(space: String, index: SGValue) -> SGValue {
}
public func texcoord(index: SGValue) -> SGValue {
}
public func tiledimage(file: TextureResource, default: SGValue, texcoord: SGValue, uvtiling: SGValue, uvoffset: SGValue, realworldimagesize: SGValue, realworldtilesize: SGValue, filtertype: String, framerange: String, frameoffset: SGValue, frameendaction: String) -> SGValue {
}
public func time(fps: SGValue) -> SGValue {
}
public func transformmatrix(in: SGValue, mat: SGValue) -> SGValue {
}
public func transformmatrix_vector2M3(in: SGValue, mat: SGValue) -> SGValue {
}
public func transformmatrix_vector3M4(in: SGValue, mat: SGValue) -> SGValue {
}
public func transformnormal(in: SGValue, fromspace: String, tospace: String) -> SGValue {
}
public func transformpoint(in: SGValue, fromspace: String, tospace: String) -> SGValue {
}
public func transformvector(in: SGValue, fromspace: String, tospace: String) -> SGValue {
}
public func transpose(in: SGValue) -> SGValue {
}
public func triplanarprojection(filex: TextureResource, filey: TextureResource, filez: TextureResource, layerx: String, layery: String, layerz: String, default: SGValue, position: SGValue, normal: SGValue, filtertype: String, framerange: String, frameoffset: SGValue, frameendaction: String) -> SGValue {
}
public func unpremult(in: SGValue) -> SGValue {
}
public func updirection(space: String) -> SGValue {
}
public func volumematerial(volumeshader: String) -> String {
}
public func worleynoise2d(texcoord: SGValue, jitter: SGValue) -> SGValue {
}
public func worleynoise3d(position: SGValue, jitter: SGValue) -> SGValue {
}
