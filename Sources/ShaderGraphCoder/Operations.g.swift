// Autogenerated by opgen.py
import Foundation
public func RealityKitTexture2D(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, bias: SGScalar, dynamic_min_lod_clamp: SGScalar, offset: SGVector) -> SGVector {
}
public func RealityKitTexture2DGradient(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, dynamic_min_lod_clamp: SGScalar, gradient_dPdx: SGVector, gradient_dPdy: SGVector, offset: SGVector) -> SGVector {
}
public func RealityKitTexture2DLOD(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, lod: SGScalar, offset: SGVector) -> SGVector {
}
public func RealityKitTexture2DPixel(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, bias: SGScalar, dynamic_min_lod_clamp: SGScalar, offset: SGVector) -> SGVector {
}
public func RealityKitTexture2DPixelGradient(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, dynamic_min_lod_clamp: SGScalar, gradient_dPdx: SGVector, gradient_dPdy: SGVector, offset: SGVector) -> SGVector {
}
public func RealityKitTexture2DPixelLOD(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, lod: SGScalar, offset: SGVector) -> SGVector {
}
public func RealityKitTextureCube(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, bias: SGScalar, dynamic_min_lod_clamp: SGScalar) -> SGVector {
}
public func RealityKitTextureCubeGradient(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, dynamic_min_lod_clamp: SGScalar, gradientcube_dPdx: SGVector, gradientcube_dPdy: SGVector) -> SGVector {
}
public func RealityKitTextureCubeLOD(file: TextureResource, u_wrap_mode: SGString, v_wrap_mode: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, max_lod_clamp: SGScalar, min_lod_clamp: SGScalar, default: SGVector, texcoord: SGVector, lod: SGScalar) -> SGVector {
}
public func RealityKitTextureRead(file: TextureResource, default: SGVector, x: SGScalar, y: SGScalar, lod: SGScalar) -> SGVector {
}
public func UsdPrimvarReader(varname: SGString, fallback: SGValue) -> SGValue {
}
public func UsdTransform2d(in: SGVector, rotation: SGScalar, scale: SGVector, translation: SGVector) -> SGVector {
}
public func absval(in: SGValue) -> SGValue {
}
public func acos(in: SGValue) -> SGValue {
}
public func add(in1: SGValue, in2: SGValue) -> SGValue {
}
public func add_displacementshader(in1: String, in2: String) -> String {
}
public func add_surfaceshader(in1: String, in2: String) -> String {
}
public func add_volumeshader(in1: String, in2: String) -> String {
}
public func ambientocclusion(coneangle: SGScalar, maxdistance: SGScalar) -> SGScalar {
}
public func asin(in: SGValue) -> SGValue {
}
public func atan2(iny: SGValue, inx: SGValue) -> SGValue {
}
public func bitangent(space: SGString, index: SGScalar) -> SGVector {
}
public func blur(in: SGValue, size: SGScalar, filtertype: SGString) -> SGValue {
}
public func burn(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func ceil(in: SGValue) -> SGValue {
}
public func cellnoise2d(texcoord: SGVector) -> SGScalar {
}
public func cellnoise3d(position: SGVector) -> SGScalar {
}
public func clamp(in: SGValue, low: SGValue, high: SGValue) -> SGValue {
}
public func contrast(in: SGValue, amount: SGValue, pivot: SGValue) -> SGValue {
}
public func cos(in: SGValue) -> SGValue {
}
public func crossproduct(in1: SGVector, in2: SGVector) -> SGVector {
}
public func determinant(in: SGValue) -> SGScalar {
}
public func difference(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func disjointover(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
}
public func divide(in1: SGValue, in2: SGValue) -> SGValue {
}
public func dodge(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func dot(in: SGValue, note: SGString) -> SGValue {
}
public func dot_displacementshader(in: String, note: SGString) -> String {
}
public func dot_lightshader(in: String, note: SGString) -> String {
}
public func dot_surfaceshader(in: String, note: SGString) -> String {
}
public func dot_volumeshader(in: String, note: SGString) -> String {
}
public func dotproduct(in1: SGVector, in2: SGVector) -> SGScalar {
}
public func exp(in: SGValue) -> SGValue {
}
public func extract(in: SGVector, index: SGScalar) -> SGScalar {
}
public func floor(in: SGValue) -> SGValue {
}
public func fractal3d(amplitude: SGValue, octaves: SGScalar, lacunarity: SGScalar, diminish: SGScalar, position: SGVector) -> SGValue {
}
public func geomcolor(index: SGScalar) -> SGValue {
}
public func geompropvalue(geomprop: SGString, default: SGValue) -> SGValue {
}
public func heighttonormal(in: SGScalar, scale: SGScalar) -> SGVector {
}
public func hsvadjust(in: SGVector, amount: SGVector) -> SGVector {
}
public func hsvtorgb(in: SGVector) -> SGVector {
}
public func ifequal(value1: SGValue, value2: SGValue, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifgreater(value1: SGScalar, value2: SGScalar, in1: SGValue, in2: SGValue) -> SGValue {
}
public func ifgreatereq(value1: SGScalar, value2: SGScalar, in1: SGValue, in2: SGValue) -> SGValue {
}
public func image(file: TextureResource, layer: SGString, default: SGValue, texcoord: SGVector, uaddressmode: SGString, vaddressmode: SGString, filtertype: SGString, framerange: SGString, frameoffset: SGScalar, frameendaction: SGString) -> SGValue {
}
public func in(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
}
public func inside(in: SGValue, mask: SGScalar) -> SGValue {
}
public func invertmatrix(in: SGValue) -> SGValue {
}
public func ln(in: SGValue) -> SGValue {
}
public func luminance(in: SGVector, lumacoeffs: SGVector) -> SGVector {
}
public func magnitude(in: SGVector) -> SGScalar {
}
public func mask(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
}
public func matte(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
}
public func max(in1: SGValue, in2: SGValue) -> SGValue {
}
public func min(in1: SGValue, in2: SGValue) -> SGValue {
}
public func minus(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func mix(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func mix_displacementshader(fg: String, bg: String, mix: SGScalar) -> String {
}
public func mix_surfaceshader(fg: String, bg: String, mix: SGScalar) -> String {
}
public func mix_volumeshader(fg: String, bg: String, mix: SGScalar) -> String {
}
public func modulo(in1: SGValue, in2: SGValue) -> SGValue {
}
public func multiply(in1: SGValue, in2: SGValue) -> SGValue {
}
public func multiply_displacementshaderF(in1: String, in2: SGScalar) -> String {
}
public func multiply_displacementshaderV(in1: String, in2: SGVector) -> String {
}
public func multiply_surfaceshaderC(in1: String, in2: SGVector) -> String {
}
public func multiply_surfaceshaderF(in1: String, in2: SGScalar) -> String {
}
public func multiply_volumeshaderC(in1: String, in2: SGVector) -> String {
}
public func multiply_volumeshaderF(in1: String, in2: SGScalar) -> String {
}
public func noise2d(amplitude: SGValue, pivot: SGScalar, texcoord: SGVector) -> SGValue {
}
public func noise3d(amplitude: SGValue, pivot: SGScalar, position: SGVector) -> SGValue {
}
public func normal(space: SGString) -> SGVector {
}
public func normal_map_decode(in: SGVector) -> SGVector {
}
public func normalize(in: SGVector) -> SGVector {
}
public func normalmap(in: SGVector, space: SGString, scale: SGValue, normal: SGVector, tangent: SGVector) -> SGVector {
}
public func out(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
}
public func outside(in: SGValue, mask: SGScalar) -> SGValue {
}
public func over(fg: SGVector, bg: SGVector, mix: SGScalar) -> SGVector {
}
public func overlay(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func place2d(texcoord: SGVector, pivot: SGVector, scale: SGVector, rotate: SGScalar, offset: SGVector) -> SGVector {
}
public func plus(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func position(space: SGString) -> SGVector {
}
public func power(in1: SGValue, in2: SGValue) -> SGValue {
}
public func premult(in: SGVector) -> SGVector {
}
public func ramp4(valuetl: SGValue, valuetr: SGValue, valuebl: SGValue, valuebr: SGValue, texcoord: SGVector) -> SGValue {
}
public func ramplr(valuel: SGValue, valuer: SGValue, texcoord: SGVector) -> SGValue {
}
public func ramptb(valuet: SGValue, valueb: SGValue, texcoord: SGVector) -> SGValue {
}
public func range(in: SGValue, inlow: SGValue, inhigh: SGValue, gamma: SGValue, outlow: SGValue, outhigh: SGValue, doclamp: SGValue) -> SGValue {
}
public func cameraposition(space: SGString) -> SGVector {
}
public func cubeimage(file: TextureResource, default: SGValue, texcoord: SGVector, filtertype: SGString) -> SGValue {
}
public func fractional(in: SGValue) -> SGValue {
}
public func geometry_switch_cameraindex(mono: SGValue, left: SGValue, right: SGValue) -> SGValue {
}
public func geometrymodifier_vertexshader(modelPositionOffset: SGVector, color: SGVector, normal: SGVector, bitangent: SGVector, uv0: SGVector, uv1: SGVector, userAttribute: SGVector, userAttributeHalf4_0: SGVector, userAttributeHalf4_1: SGVector, userAttributeHalf4_2: SGVector, userAttributeHalf4_3: SGVector, userAttributeHalf2_0: SGVector, userAttributeHalf2_1: SGVector) -> String {
}
public func image(file: TextureResource, default: SGValue, texcoord: SGVector, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func image_bias(file: TextureResource, default: SGValue, texcoord: SGVector, bias: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func image_bias_min_lod_clamp(file: TextureResource, default: SGValue, texcoord: SGVector, bias: SGScalar, min_lod_clamp: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func image_gradient2d(file: TextureResource, default: SGValue, texcoord: SGVector, gradient2d_x: SGString, gradient2d_y: SGString, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func image_gradient2d_min_lod_clamp(file: TextureResource, default: SGValue, texcoord: SGVector, gradient2d_x: SGString, gradient2d_y: SGString, min_lod_clamp: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func image_lod(file: TextureResource, default: SGValue, texcoord: SGVector, level: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func image_min_lod_clamp(file: TextureResource, default: SGValue, texcoord: SGVector, min_lod_clamp: SGScalar, coord: SGString, s_address: SGString, t_address: SGString, border_color: SGString, mag_filter: SGString, min_filter: SGString, mip_filter: SGString, max_anisotropy: SGScalar, lod_min: SGScalar, lod_max: SGScalar) -> SGValue {
}
public func logical_and(in1: SGValue, in2: SGValue) -> SGValue {
}
public func logical_not(in: SGValue) -> SGValue {
}
public func logical_or(in1: SGValue, in2: SGValue) -> SGValue {
}
public func logical_xor(in1: SGValue, in2: SGValue) -> SGValue {
}
public func oneminus(in: SGValue) -> SGValue {
}
public func pbr_surfaceshader(baseColor: SGVector, emissiveColor: SGVector, normal: SGVector, roughness: SGScalar, metallic: SGScalar, ambientOcclusion: SGScalar, specular: SGScalar, opacity: SGScalar, opacityThreshold: SGScalar, clearcoat: SGScalar, clearcoatRoughness: SGScalar, hasPremultipliedAlpha: SGValue) -> String {
}
public func reflect(in: SGVector, normal: SGVector) -> SGVector {
}
public func refract(in: SGVector, normal: SGVector, eta: SGScalar) -> SGVector {
}
public func step(in: SGValue, edge: SGValue) -> SGValue {
}
public func unlit_surfaceshader(color: SGVector, opacity: SGScalar, opacityThreshold: SGScalar, applyPostProcessToneMap: SGValue, hasPremultipliedAlpha: SGValue) -> String {
}
public func viewdirection(space: SGString) -> SGVector {
}
public func remap(in: SGValue, inlow: SGValue, inhigh: SGValue, outlow: SGValue, outhigh: SGValue) -> SGValue {
}
public func rgbtohsv(in: SGVector) -> SGVector {
}
public func rotate2d(in: SGVector, amount: SGScalar) -> SGVector {
}
public func rotate3d(in: SGVector, amount: SGScalar, axis: SGVector) -> SGVector {
}
public func round(in: SGValue) -> SGValue {
}
public func safepower(in1: SGValue, in2: SGValue) -> SGValue {
}
public func saturate(in: SGVector, amount: SGScalar, lumacoeffs: SGVector) -> SGVector {
}
public func screen(fg: SGValue, bg: SGValue, mix: SGScalar) -> SGValue {
}
public func sign(in: SGValue) -> SGValue {
}
public func sin(in: SGValue) -> SGValue {
}
public func smoothstep(in: SGValue, low: SGValue, high: SGValue) -> SGValue {
}
public func splitlr(valuel: SGValue, valuer: SGValue, center: SGScalar, texcoord: SGVector) -> SGValue {
}
public func splittb(valuet: SGValue, valueb: SGValue, center: SGScalar, texcoord: SGVector) -> SGValue {
}
public func sqrt(in: SGValue) -> SGValue {
}
public func subtract(in1: SGValue, in2: SGValue) -> SGValue {
}
public func surfacematerial(surfaceshader: String, displacementshader: String) -> String {
}
public func switch(in1: SGValue, in2: SGValue, in3: SGValue, in4: SGValue, in5: SGValue, in6: SGValue, in7: SGValue, in8: SGValue, in9: SGValue, in10: SGValue, which: SGScalar) -> SGValue {
}
public func tan(in: SGValue) -> SGValue {
}
public func tangent(space: SGString, index: SGScalar) -> SGVector {
}
public func texcoord(index: SGScalar) -> SGVector {
}
public func tiledimage(file: TextureResource, default: SGValue, texcoord: SGVector, uvtiling: SGVector, uvoffset: SGVector, realworldimagesize: SGVector, realworldtilesize: SGVector, filtertype: SGString, framerange: SGString, frameoffset: SGScalar, frameendaction: SGString) -> SGValue {
}
public func time(fps: SGScalar) -> SGScalar {
}
public func transformmatrix(in: SGVector, mat: SGValue) -> SGVector {
}
public func transformmatrix_vector2M3(in: SGVector, mat: SGValue) -> SGVector {
}
public func transformmatrix_vector3M4(in: SGVector, mat: SGValue) -> SGVector {
}
public func transformnormal(in: SGVector, fromspace: SGString, tospace: SGString) -> SGVector {
}
public func transformpoint(in: SGVector, fromspace: SGString, tospace: SGString) -> SGVector {
}
public func transformvector(in: SGVector, fromspace: SGString, tospace: SGString) -> SGVector {
}
public func transpose(in: SGValue) -> SGValue {
}
public func triplanarprojection(filex: TextureResource, filey: TextureResource, filez: TextureResource, layerx: SGString, layery: SGString, layerz: SGString, default: SGValue, position: SGVector, normal: SGVector, filtertype: SGString, framerange: SGString, frameoffset: SGScalar, frameendaction: SGString) -> SGValue {
}
public func unpremult(in: SGVector) -> SGVector {
}
public func updirection(space: SGString) -> SGVector {
}
public func volumematerial(volumeshader: String) -> String {
}
public func worleynoise2d(texcoord: SGVector, jitter: SGScalar) -> SGValue {
}
public func worleynoise3d(position: SGVector, jitter: SGScalar) -> SGValue {
}
